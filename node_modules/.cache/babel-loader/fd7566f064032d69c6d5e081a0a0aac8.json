{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _createReactClass = require('create-react-class');\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\nvar _reactNative = require('react-native');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar styles = _reactNative.StyleSheet.create({\n  button: {\n    flexDirection: 'row',\n    alignSelf: 'stretch',\n    justifyContent: 'center'\n  },\n  textButton: {\n    fontSize: 14,\n    alignSelf: 'center'\n  },\n  opacity: {\n    opacity: 0.8\n  }\n});\nvar NativeButton = (0, _createReactClass2.default)({\n  displayName: 'NativeButton',\n  propTypes: _extends({}, _reactNative.TouchableWithoutFeedback.propTypes, {\n    textStyle: _propTypes2.default.any,\n    disabledStyle: _propTypes2.default.any,\n    children: _propTypes2.default.node.isRequired,\n    underlayColor: _propTypes2.default.string,\n    background: _propTypes2.default.any\n  }),\n  statics: {\n    isAndroid: _reactNative.Platform.OS === 'android'\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      textStyle: null,\n      disabledStyle: null,\n      underlayColor: null\n    };\n  },\n  _renderText: function _renderText() {\n    // If children is not a string don't wrapp it in a Text component\n    if (typeof this.props.children !== 'string') {\n      return this.props.children;\n    }\n    return _react2.default.createElement(_reactNative.Text, {\n      numberOfLines: 1,\n      ellipsizeMode: _reactNative.Platform.OS === 'ios' ? 'clip' : 'tail',\n      style: [styles.textButton, this.props.textStyle]\n    }, this.props.children);\n  },\n  render: function render() {\n    var disabledStyle = this.props.disabled ? this.props.disabledStyle || styles.opacity : {};\n\n    // Extract Button props\n    var buttonProps = {\n      accessibilityComponentType: this.props.accessibilityComponentType,\n      accessibilityTraits: this.props.accessibilityTraits,\n      accessible: this.props.accessible,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      disabled: this.props.disabled,\n      hitSlop: this.props.hitSlop,\n      onLayout: this.props.onLayout,\n      onPress: this.props.onPress,\n      onPressIn: this.props.onPressIn,\n      onPressOut: this.props.onPressOut,\n      onLongPress: this.props.onLongPress,\n      pressRetentionOffset: this.props.pressRetentionOffset\n    };\n\n    // Render Native Android Button\n    if (NativeButton.isAndroid) {\n      buttonProps = Object.assign(buttonProps, {\n        background: this.props.background || _reactNative.TouchableNativeFeedback.SelectableBackground()\n      });\n      return _react2.default.createElement(_reactNative.TouchableNativeFeedback, buttonProps, _react2.default.createElement(_reactNative.View, {\n        style: [styles.button, this.props.style, disabledStyle]\n      }, this._renderText()));\n    }\n\n    // Render default button\n    return _react2.default.createElement(_reactNative.TouchableHighlight, _extends({}, buttonProps, {\n      style: [styles.button, this.props.style, disabledStyle],\n      underlayColor: this.props.underlayColor\n    }), this._renderText());\n  }\n});\nexports.default = NativeButton;","map":null,"metadata":{},"sourceType":"script"}