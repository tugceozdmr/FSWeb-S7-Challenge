{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar _reactTweenState = require('react-tween-state');\nvar _reactTweenState2 = _interopRequireDefault(_reactTweenState);\nvar _NativeButton = require('./NativeButton');\nvar _NativeButton2 = _interopRequireDefault(_NativeButton);\nvar _styles = require('./styles');\nvar _styles2 = _interopRequireDefault(_styles);\nvar _react = require('react');\nvar _react2 = _interopRequireDefault(_react);\nvar _propTypes = require('prop-types');\nvar _propTypes2 = _interopRequireDefault(_propTypes);\nvar _createReactClass = require('create-react-class');\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\nvar _reactNative = require('react-native');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar SwipeoutBtn = (0, _createReactClass2.default)({\n  displayName: 'SwipeoutBtn',\n  propTypes: {\n    backgroundColor: _propTypes2.default.string,\n    color: _propTypes2.default.string,\n    component: _propTypes2.default.node,\n    onPress: _propTypes2.default.func,\n    text: _propTypes2.default.node,\n    type: _propTypes2.default.string,\n    underlayColor: _propTypes2.default.string\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      backgroundColor: null,\n      color: null,\n      component: null,\n      underlayColor: null,\n      height: 0,\n      onPress: null,\n      disabled: false,\n      text: 'Click me',\n      type: '',\n      width: 0\n    };\n  },\n  render: function render() {\n    var btn = this.props;\n    var styleSwipeoutBtn = [_styles2.default.swipeoutBtn];\n\n    //  apply \"type\" styles (delete || primary || secondary)\n    if (btn.type === 'delete') styleSwipeoutBtn.push(_styles2.default.colorDelete);else if (btn.type === 'primary') styleSwipeoutBtn.push(_styles2.default.colorPrimary);else if (btn.type === 'secondary') styleSwipeoutBtn.push(_styles2.default.colorSecondary);\n\n    //  apply background color\n    if (btn.backgroundColor) styleSwipeoutBtn.push([{\n      backgroundColor: btn.backgroundColor\n    }]);\n    styleSwipeoutBtn.push([{\n      height: btn.height,\n      width: btn.width\n    }]);\n    var styleSwipeoutBtnComponent = [];\n\n    //  set button dimensions\n    styleSwipeoutBtnComponent.push([{\n      height: btn.height,\n      width: btn.width\n    }]);\n    var styleSwipeoutBtnText = [_styles2.default.swipeoutBtnText];\n\n    //  apply text color\n    if (btn.color) styleSwipeoutBtnText.push({\n      color: btn.color\n    });\n    return _react2.default.createElement(_NativeButton2.default, {\n      onPress: this.props.onPress,\n      underlayColor: this.props.underlayColor,\n      disabled: this.props.disabled,\n      style: [_styles2.default.swipeoutBtnTouchable, styleSwipeoutBtn],\n      textStyle: styleSwipeoutBtnText\n    }, btn.component ? _react2.default.createElement(_reactNative.View, {\n      style: styleSwipeoutBtnComponent\n    }, btn.component) : btn.text);\n  }\n});\nvar Swipeout = (0, _createReactClass2.default)({\n  displayName: 'Swipeout',\n  mixins: [_reactTweenState2.default.Mixin],\n  propTypes: {\n    autoClose: _propTypes2.default.bool,\n    backgroundColor: _propTypes2.default.string,\n    close: _propTypes2.default.bool,\n    left: _propTypes2.default.array,\n    onOpen: _propTypes2.default.func,\n    onClose: _propTypes2.default.func,\n    right: _propTypes2.default.array,\n    scroll: _propTypes2.default.func,\n    style: (_reactNative.ViewPropTypes || _reactNative.View.propTypes).style,\n    sensitivity: _propTypes2.default.number,\n    buttonWidth: _propTypes2.default.number,\n    disabled: _propTypes2.default.bool\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      disabled: false,\n      rowID: -1,\n      sectionID: -1,\n      sensitivity: 50\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      autoClose: this.props.autoClose || false,\n      btnWidth: 0,\n      btnsLeftWidth: 0,\n      btnsRightWidth: 0,\n      contentHeight: 0,\n      contentPos: 0,\n      contentWidth: 0,\n      openedRight: false,\n      swiping: false,\n      tweenDuration: 160,\n      timeStart: null\n    };\n  },\n  componentWillMount: function componentWillMount() {\n    var _this = this;\n    this._panResponder = _reactNative.PanResponder.create({\n      onStartShouldSetPanResponder: function onStartShouldSetPanResponder(event, gestureState) {\n        return true;\n      },\n      onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture(event, gestureState) {\n        return _this.state.openedLeft || _this.state.openedRight;\n      },\n      onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(event, gestureState) {\n        return Math.abs(gestureState.dx) > _this.props.sensitivity && Math.abs(gestureState.dy) <= _this.props.sensitivity;\n      },\n      onPanResponderGrant: this._handlePanResponderGrant,\n      onPanResponderMove: this._handlePanResponderMove,\n      onPanResponderRelease: this._handlePanResponderEnd,\n      onPanResponderTerminate: this._handlePanResponderEnd,\n      onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {\n        return false;\n      },\n      onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {\n        return false;\n      }\n    });\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    if (nextProps.close) this._close();\n    if (nextProps.openRight) this._openRight();\n    if (nextProps.openLeft) this._openLeft();\n  },\n  _handlePanResponderGrant: function _handlePanResponderGrant(e, gestureState) {\n    var _this2 = this;\n    if (this.props.disabled) return;\n    if (!this.state.openedLeft && !this.state.openedRight) {\n      this._callOnOpen();\n    } else {\n      this._callOnClose();\n    }\n    this.refs.swipeoutContent.measure(function (ox, oy, width, height) {\n      var buttonWidth = _this2.props.buttonWidth || width / 5;\n      _this2.setState({\n        btnWidth: buttonWidth,\n        btnsLeftWidth: _this2.props.left ? buttonWidth * _this2.props.left.length : 0,\n        btnsRightWidth: _this2.props.right ? buttonWidth * _this2.props.right.length : 0,\n        swiping: true,\n        timeStart: new Date().getTime()\n      });\n    });\n  },\n  _handlePanResponderMove: function _handlePanResponderMove(e, gestureState) {\n    if (this.props.disabled) return;\n    var posX = gestureState.dx;\n    var posY = gestureState.dy;\n    var leftWidth = this.state.btnsLeftWidth;\n    var rightWidth = this.state.btnsRightWidth;\n    if (this.state.openedRight) var posX = gestureState.dx - rightWidth;else if (this.state.openedLeft) var posX = gestureState.dx + leftWidth;\n\n    //  prevent scroll if moveX is true\n    var moveX = Math.abs(posX) > Math.abs(posY);\n    if (this.props.scroll) {\n      if (moveX) this.props.scroll(false);else this.props.scroll(true);\n    }\n    if (this.state.swiping) {\n      //  move content to reveal swipeout\n      if (posX < 0 && this.props.right) {\n        this.setState({\n          contentPos: Math.min(posX, 0)\n        });\n      } else if (posX > 0 && this.props.left) {\n        this.setState({\n          contentPos: Math.max(posX, 0)\n        });\n      }\n      ;\n    }\n  },\n  _handlePanResponderEnd: function _handlePanResponderEnd(e, gestureState) {\n    if (this.props.disabled) return;\n    var posX = gestureState.dx;\n    var contentPos = this.state.contentPos;\n    var contentWidth = this.state.contentWidth;\n    var btnsLeftWidth = this.state.btnsLeftWidth;\n    var btnsRightWidth = this.state.btnsRightWidth;\n\n    //  minimum threshold to open swipeout\n    var openX = contentWidth * 0.33;\n\n    //  should open swipeout\n    var openLeft = posX > openX || posX > btnsLeftWidth / 2;\n    var openRight = posX < -openX || posX < -btnsRightWidth / 2;\n\n    //  account for open swipeouts\n    if (this.state.openedRight) var openRight = posX - openX < -openX;\n    if (this.state.openedLeft) var openLeft = posX + openX > openX;\n\n    //  reveal swipeout on quick swipe\n    var timeDiff = new Date().getTime() - this.state.timeStart < 200;\n    if (timeDiff) {\n      var openRight = posX < -openX / 10 && !this.state.openedLeft;\n      var openLeft = posX > openX / 10 && !this.state.openedRight;\n    }\n    if (this.state.swiping) {\n      if (openRight && contentPos < 0 && posX < 0) {\n        this._open(-btnsRightWidth, 'right');\n      } else if (openLeft && contentPos > 0 && posX > 0) {\n        this._open(btnsLeftWidth, 'left');\n      } else {\n        this._close();\n      }\n    }\n\n    //  Allow scroll\n    if (this.props.scroll) this.props.scroll(true);\n  },\n  _tweenContent: function _tweenContent(state, endValue) {\n    this.tweenState(state, {\n      easing: _reactTweenState2.default.easingTypes.easeInOutQuad,\n      duration: endValue === 0 ? this.state.tweenDuration * 1.5 : this.state.tweenDuration,\n      endValue: endValue\n    });\n  },\n  _rubberBandEasing: function _rubberBandEasing(value, limit) {\n    if (value < 0 && value < limit) return limit - Math.pow(limit - value, 0.85);else if (value > 0 && value > limit) return limit + Math.pow(value - limit, 0.85);\n    return value;\n  },\n  //  close swipeout on button press\n  _autoClose: function _autoClose(btn) {\n    if (this.state.autoClose) this._close();\n    var onPress = btn.onPress;\n    if (onPress) onPress();\n  },\n  _open: function _open(contentPos, direction) {\n    var left = direction === 'left';\n    var _props = this.props,\n      sectionID = _props.sectionID,\n      rowID = _props.rowID,\n      onOpen = _props.onOpen;\n    onOpen && onOpen(sectionID, rowID, direction);\n    this._tweenContent('contentPos', contentPos);\n    this.setState({\n      contentPos: contentPos,\n      openedLeft: left,\n      openedRight: !left,\n      swiping: false\n    });\n  },\n  _close: function _close() {\n    var _props2 = this.props,\n      sectionID = _props2.sectionID,\n      rowID = _props2.rowID,\n      onClose = _props2.onClose;\n    if (onClose && (this.state.openedLeft || this.state.openedRight)) {\n      var direction = this.state.openedRight ? 'right' : 'left';\n      onClose(sectionID, rowID, direction);\n    }\n    this._tweenContent('contentPos', 0);\n    this._callOnClose();\n    this.setState({\n      openedRight: false,\n      openedLeft: false,\n      swiping: false\n    });\n  },\n  _callOnClose: function _callOnClose() {\n    if (this.props.onClose) this.props.onClose(this.props.sectionID, this.props.rowID);\n  },\n  _callOnOpen: function _callOnOpen() {\n    if (this.props.onOpen) this.props.onOpen(this.props.sectionID, this.props.rowID);\n  },\n  _openRight: function _openRight() {\n    var _this3 = this;\n    this.refs.swipeoutContent.measure(function (ox, oy, width, height) {\n      var btnWidth = _this3.props.buttonWidth || width / 5;\n      _this3.setState({\n        btnWidth: btnWidth,\n        btnsRightWidth: _this3.props.right ? btnWidth * _this3.props.right.length : 0\n      }, function () {\n        _this3._tweenContent('contentPos', -_this3.state.btnsRightWidth);\n        _this3._callOnOpen();\n        _this3.setState({\n          contentPos: -_this3.state.btnsRightWidth,\n          openedLeft: false,\n          openedRight: true,\n          swiping: false\n        });\n      });\n    });\n  },\n  _openLeft: function _openLeft() {\n    var _this4 = this;\n    this.refs.swipeoutContent.measure(function (ox, oy, width, height) {\n      var btnWidth = _this4.props.buttonWidth || width / 5;\n      _this4.setState({\n        btnWidth: btnWidth,\n        btnsLeftWidth: _this4.props.left ? btnWidth * _this4.props.left.length : 0\n      }, function () {\n        _this4._tweenContent('contentPos', _this4.state.btnsLeftWidth);\n        _this4._callOnOpen();\n        _this4.setState({\n          contentPos: _this4.state.btnsLeftWidth,\n          openedLeft: true,\n          openedRight: false,\n          swiping: false\n        });\n      });\n    });\n  },\n  render: function render() {\n    var contentWidth = this.state.contentWidth;\n    var posX = this.getTweeningValue('contentPos');\n    var styleSwipeout = [_styles2.default.swipeout, this.props.style];\n    if (this.props.backgroundColor) {\n      styleSwipeout.push([{\n        backgroundColor: this.props.backgroundColor\n      }]);\n    }\n    var limit = -this.state.btnsRightWidth;\n    if (posX > 0) var limit = this.state.btnsLeftWidth;\n    var styleLeftPos = {\n      left: {\n        left: 0,\n        overflow: 'hidden',\n        width: Math.min(limit * (posX / limit), limit)\n      }\n    };\n    var styleRightPos = {\n      right: {\n        left: Math.abs(contentWidth + Math.max(limit, posX)),\n        right: 0\n      }\n    };\n    var styleContentPos = {\n      content: {\n        transform: [{\n          translateX: this._rubberBandEasing(posX, limit)\n        }]\n      }\n    };\n    var styleContent = [_styles2.default.swipeoutContent];\n    styleContent.push(styleContentPos.content);\n    var styleRight = [_styles2.default.swipeoutBtns];\n    styleRight.push(styleRightPos.right);\n    var styleLeft = [_styles2.default.swipeoutBtns];\n    styleLeft.push(styleLeftPos.left);\n    var isRightVisible = posX < 0;\n    var isLeftVisible = posX > 0;\n    return _react2.default.createElement(_reactNative.View, {\n      style: styleSwipeout\n    }, _react2.default.createElement(_reactNative.View, _extends({\n      ref: 'swipeoutContent',\n      style: styleContent,\n      onLayout: this._onLayout\n    }, this._panResponder.panHandlers), this.props.children), this._renderButtons(this.props.right, isRightVisible, styleRight), this._renderButtons(this.props.left, isLeftVisible, styleLeft));\n  },\n  _onLayout: function _onLayout(event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n      width = _event$nativeEvent$la.width,\n      height = _event$nativeEvent$la.height;\n    this.setState({\n      contentWidth: width,\n      contentHeight: height\n    });\n  },\n  _renderButtons: function _renderButtons(buttons, isVisible, style) {\n    if (buttons && isVisible) {\n      return _react2.default.createElement(_reactNative.View, {\n        style: style\n      }, buttons.map(this._renderButton));\n    } else {\n      return _react2.default.createElement(_reactNative.View, null);\n    }\n  },\n  _renderButton: function _renderButton(btn, i) {\n    var _this5 = this;\n    return _react2.default.createElement(SwipeoutBtn, {\n      backgroundColor: btn.backgroundColor,\n      color: btn.color,\n      component: btn.component,\n      disabled: btn.disabled,\n      height: this.state.contentHeight,\n      key: i,\n      onPress: function onPress() {\n        return _this5._autoClose(btn);\n      },\n      text: btn.text,\n      type: btn.type,\n      underlayColor: btn.underlayColor,\n      width: this.state.btnWidth\n    });\n  }\n});\nSwipeout.NativeButton = _NativeButton2.default;\nSwipeout.SwipeoutButton = SwipeoutBtn;\nexports.default = Swipeout;","map":null,"metadata":{},"sourceType":"script"}